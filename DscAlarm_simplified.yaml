#for documentation see project at https://github.com/Dilbert66/esphome-dsckeybus
substitutions:

  systemName: "dscalarm" 
  
  #you can enter a list of user codes mapped to their names for display in armed/disarmed event messages
  userCodes: "1:John,2:Sally,3:Bob" #
  
  #Only comes into effect if a password prompt occurs when arming eg. night mode
  accessCode: !secret access_code 
  
  #used to select the default partition associated with the alarm panel messages
  defaultPartition: "1" 
  
  # dsc debug level: 0 = off, 1 = minimal, 2 = all packets shown on console  3 =  + serial port debugging
  dscDebugLevel: "2"  
   
  #zone expander addresses:
  # 9  - zones 9-16
  # 10 - zones 17-24
  # 11 - zones 25-32
  # 12 - zones 33-40 (for systems with 64 zone support)
  # 13 - zones 41-48 (for systems with 64 zone support)
  # 14 - zones 49-56 (for systems with 64 zone support)
  # 16 - zones 57-64 (for systems with 64 zone support)  
  expanderAddr1: "0" # 1st zone expander emulator address to use . Set to 0 to disable. 
  expanderAddr2: "0" # 2nd expander emulator address to use . Set to 0 to disable. 
  
  #ESP32 Pins
  dscClockPin: "22"
  dscReadPin: "21"
  dscWritePin: "18"
  
  #ESP8266 Pins
  #dscClockPin: "5"
  #dscReadPin: "4"
  #dscWritePin: "15"  
  
  maxZones: "32" # maximum amount of zones your system supports
  
esphome:
  name: $systemName
  friendly_name: $systemName
  platform: ESP32
  board: nodemcu-32s
  #platform: ESP8266
  #board: nodemcuv2

  includes:
    # subdirectory path where custom component *.h and *.cpp files are located
    - dscKeybusInterface/


 #ESP32 only .  Calls a public function within the custom component above. In this case syncs the time     
 # to the panel 30 seconds after startup
 # on_boot:
 #   priority: -100 #everything initialized
 #   then:
 #     - delay: 30s
 #     - lambda: |-
 #         DSCkeybus->set_panel_time();    

#ESP32 only .  Syncs  the time with the panel every hour
#interval:
#  - interval: 3600s
#    then:
#      - lambda: |-
#          DSCkeybus->set_panel_time();  
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "$systemName"
    password: !secret wifi_password

logger:
  baud_rate: 115200
  level: DEBUG

api:
   #password: !secret api_password  
   encryption:
    key: !secret encryption_key

ota:
   password: !secret ota_password
   safe_mode: True
   on_begin:
    then:
      - switch.turn_off: connection_status_switch   
   
status_led:
  pin:
    number: GPIO2
    inverted: no
  
time:
 - platform: sntp


##########################################################################
# Edit binary and text sensors below to suit your alarm setup.
# You can safely add or remove any sensors as needed. 
# Ensure that you add the correct sensor identifier code in round brackets 
# at the end of the sensor name: eg. (z1)

binary_sensor:
### zone setup ###
# open/close status for each zone 
# zone id code = (z+zone number)  
  - platform: template
    name: "Front door (z1)"
    device_class: door

  - platform: template
    name: "Garage door (z2)"
    device_class: door

  - platform: template
    name: "Back door (z3)"
    device_class: door

  - platform: template
    name: "Living room window (z4)"
    device_class: window

  - platform: template
    name: "Dining room window (z5)"
    device_class: window

  - platform: template
    name: "Family room window LF (z6)"
    device_class: window

  - platform: template
    name: "Family room window RF (z7)"
    device_class: window

  - platform: template
    name: "Basement windows (z8)"
    device_class: window

  - platform: template
    name: "Upstairs motion (z9)"
    device_class: motion

  - platform: template
    name: "Basement motion (z10)"
    device_class: motion

  - platform: template
    name: "Main floor motion (z11)"
    device_class: motion

  - platform: template
    name: "Test sensor (z17)"
    device_class: motion    


### non zone sensors ###
# partition ready indicators
# ready id code = (rdy_ + partition number)
  - platform: template
    name: "Partition 1 Ready (rdy_1)"

  - platform: template
    name: "Partition 2 Ready (rdy_2)"    

# partition arm indicators
# arm id code = (arm_ + partition number)
  - platform: template
    name: "Partition 1 Armed (arm_1)"

  - platform: template
    name: "Partition 2 Armed (arm_2)"    

# panel trouble status indicator
# trouble id code = (tr)
  - platform: template
    name: "Trouble Status (tr)"
    device_class: problem

# bat id code = (bat)
# panel battery status indicator
  - platform: template
    name: "Battery Status (bat)"
    device_class: problem

# ac id code = (ac)
# panel AC power indicator
  - platform: template
    name: "AC Status (ac)"
    device_class: plug
    
# partition fire alarm indicators
# fire id code = (fa_ + partition number)    
  - platform: template
    device_class: smoke
    name: "Fire partition 1 Status (fa_1)"
    
  - platform: template
    device_class: smoke
    name: "Fire partition 2 Status (fa_2)"    

# partition in alarm indicators
# alarm id code = (al_ + partition number)    
  - platform: template
    name: "partition 1 Alarm Status (al_1)"
    
  - platform: template
    name: "partition 2 Alarm Status (al_2)"  
    
# relay PGM channels. Will show the state of the activate relay channel on/off
# relay id code = (r + relay channel number)
  - platform: template
    name: "PGM 1 (r1)"

  - platform: template
    name: "PGM 2 (r2)"

  - platform: template
    name: "PGM 3 (r3)"

  - platform: template
    name: "PGM 4 (r4)"

  #- platform: template
  #  name: "PGM 5 (r5)"

  #- platform: template
  #  name: "PGM 6 (r6)"

  #- platform: template
  #  name: "PGM 7 (r7)"

  #- platform: template
  #  name: "PGM 8 (r8)"
  
         
text_sensor:
# general system status online/disconnected 
# system status id code = (ss)
  - platform: template
    name: "System Status (ss)"
    icon: "mdi:shield"

# battery level status for wireless channels, tamper , in alarm, etc for individual zones
# zone status id code = (zs)    
  - platform: template
    name: "zone status (zs)"
    icon: "mdi:shield"  

# partition status ie ready/not ready, triggered, etc
# partition status id code = (ps_ + partition number)    
  - platform: template
    name: "Partition 1 Status (ps_1)"
    icon: "mdi:shield"

  - platform: template
    name: "Partition 2 Status (ps_2)" 
    icon: "mdi:shield"  

# more verbose message regarding the partition status. ie zones open, bypassed, etc
# partition message id code = (msg_ + partition number)    
  - platform: template
    name: "Partition 1 Msg (msg_1)"
    icon: "mdi:alert-box"

  - platform: template
    name: "Partition 2 Msg (msg_2)" 
    icon: "mdi:alert-box"

# virtual lcd keypad line1 and line2 messages for each partition   
# partition line1 id code = (ln1_ + partition number)
# partition line2 id code = (ln2_ + partition number)
# partition 1
  - platform: template
    name: "line1 Partition 1 (ln1_1)"
    icon: "mdi:alert-box"

  - platform: template
    name: "line2 Partition 1 (ln2_1)"
    icon: "mdi:alert-box"  

# partition 2
  - platform: template
    name: "line1 partition 2 (ln1_2)"
    icon: "mdi:alert-box"

  - platform: template
    name: "line2 partition 2 (ln2_2)"
    icon: "mdi:alert-box" 

# generic event messages from panel
# panel event id code = (evt)
  - platform: template
    name: "event (evt)"
    icon: "mdi:alert-box" 
  
# partition beeps
# beeps id code = (bp_ + partition number)
  - platform: template
    name: "beeps (bp_1)"
    icon: "mdi:alert-box" 

  - platform: template
    name: "partition 2 beeps (bp_2)"
    icon: "mdi:alert-box"   

 # panel trouble messages  
 # panel msg id code = (tr_msg)
  - platform: template
    name: "Trouble Msg (tr_msg)" 
    icon: "mdi:alert-box"

# this sensor below is optional - example use of pin d8 as a zone trigger pin for the emulated zone expander  
# this emulates the hardware connection for a pc5108 board. Use a pull down/pull up resistor.  Adjust logic accordingly for the correct logic output. ie invert
 # - platform: gpio  
 #   pin: D8
 #   device_class: window
 #   on_press:       #pin high=on(open), pin low=off(closed)
 #     - lambda: |-
 #         dsc.setZoneFault(17,1);  #set zone 17 as open
 #   on_release:
 #     - lambda: |-
 #         dsc.setZoneFault(17,0);  #set zone 17 as closed
     

 # end of panel sensor setup - no need to edit anything below.
##############################################################################
  - platform: debug
    device:
      name: "Device Info"    

switch:
    #shows status of connection status to panel.  You can disconnect before upload using the switch.
  - platform: template
    name: "Connection"
    id: connection_status_switch
    lambda: |-
      return dsc.keybusConnected;
    icon: "mdi:shield-link-variant"
    turn_on_action:
      - switch.toggle: restart_switch
    turn_off_action:
      - lambda: |-
          disconnectKeybus();

  - platform: restart
    id: restart_switch
    
  - platform: safe_mode
    name: "(Safe Mode)" 

custom_component:
  lambda: |-
    DSCkeybus = new DSCkeybushome($dscClockPin,$dscReadPin,$dscWritePin);
    DSCkeybus->accessCode="$accessCode";
    DSCkeybus->maxZones=$maxZones;
    DSCkeybus->userCodes="$userCodes";
    DSCkeybus->defaultPartition=$defaultPartition;
    DSCkeybus->debug=$dscDebugLevel; // 0 = off, 1 = minimal, 2 = all packets shown on console  3 =  + serial port debugging
    DSCkeybus->expanderAddr1=$expanderAddr1; //zone expander
    DSCkeybus->expanderAddr2=$expanderAddr2;

    DSCkeybus->onSystemStatusChange([&](std::string statusCode) {
      std::string sensor = "(ss)";
      publishTextState(&sensor,&statusCode);        
    });
    
    DSCkeybus->onPartitionStatusChange([&](std::string  statusCode, int partition) {
      std::string sensor = "(ps_"+std::to_string(partition)+")";
      publishTextState(&sensor,&statusCode);   
      sensor = "(al_"+std::to_string(partition)+")";
      publishBinaryState(&sensor,statusCode.compare("triggered")==0);          
    });
    
    DSCkeybus->onPartitionMsgChange([&](std::string  msg,uint8_t partition) {
      std::string sensor = "(msg_"+std::to_string(partition)+")";
      publishTextState(&sensor,&msg);         
    });      

    DSCkeybus->onPanelStatusChange([&](panelStatus ps,bool open,int partition) {
      std::string sensor="NIL";
      if (!partition) {
        switch(ps) {
        case trStatus: sensor = "(tr)"; break;
        case batStatus: sensor = "(bat)"; break;
        case acStatus: sensor = "(ac)"; break;
        }                
      } else {
         switch(ps) {
          case rdyStatus:  sensor = "(rdy_" + std::to_string(partition) + ")"; break;
          case armStatus:  sensor = "(arm_" + std::to_string(partition) + ")"; break;
         }         
      }
      publishBinaryState(&sensor,open);
    });

    DSCkeybus->onZoneMsgStatus([&](std::string  msg) {
      std::string sensor = "(zs)";
      publishTextState(&sensor,&msg);       
    });

    DSCkeybus->onLine1Display([&](std::string  msg,int partition) {
      std::string sensor = "(ln1_"+std::to_string(partition)+")";
      publishTextState(&sensor,&msg);       
    });

    DSCkeybus->onLine2Display([&](std::string  msg,int partition) {
      std::string sensor = "(ln2_"+std::to_string(partition)+")";
      publishTextState(&sensor,&msg);          
    });
    DSCkeybus->onEventInfo([&](std::string  msg) {
      std::string sensor = "(evt)";
      publishTextState(&sensor,&msg);          
    });  
 
    DSCkeybus->onBeeps([&](std::string  beep,int partition) {
      std::string sensor = "(bp_"+std::to_string(partition)+")";
      publishTextState(&sensor,&beep);          
    });    

    DSCkeybus->onFireStatusChange([&](bool open,int partition) {
      std::string sensor = "(fa_"+std::to_string(partition)+")";
      publishBinaryState(&sensor,open);          
    }); 

    DSCkeybus->onTroubleMsgStatus([&](std::string  msg) {
          std::string sensor = "(tr_msg)";
          publishTextState(&sensor,&msg);            
    });

    DSCkeybus->onZoneStatusChange([&](uint8_t zone, bool open) {
      std::string sensor = "(z" + std::to_string(zone) + ")";
      publishBinaryState(&sensor,open);
    });

    DSCkeybus->onRelayChannelChange([&](uint8_t channel, bool state) {
      std::string sensor = "(r"+std::to_string(channel)+")";
      publishBinaryState(&sensor,state);    
    });
    return {DSCkeybus};
  components:
    - id: DSCComponent

